on:
  push:
    branches: [main]
  pull_request:

name: Continuous integration

jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [msrv, stable, nightly, macos, windows]
        include:
          - build: msrv
            os: ubuntu-latest
            rust: 1.70.0
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - run: cargo test

  test-postgres:
    name: Test Postgres
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up Postgres test environment
        run: |
          cd persistence/postgres-es
          docker compose up -d
          sleep 10 # wait for the database to be ready
          cargo test
          docker compose down

  test-mysql:
    name: Test MySQL
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up MySQL test environment
        run: |
          cd persistence/mysql-es
          docker compose up -d
          sleep 10 # wait for the database to be ready
          cargo test
          docker compose down

  test-dynamo:
    name: Test DynamoDB
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up DynamoDB test environment
        run: |
          cd persistence/dynamo-es
          docker compose up -d
          ./db/create_tables.sh
          sleep 10 # wait for the database to be ready
          cargo test
          docker compose down

  fmt:
    name: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt -- --check

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v1
